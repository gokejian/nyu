From b5d43d5e73b4b20b38b02cb3a7082b846d7f3a70 Mon Sep 17 00:00:00 2001
From: Jun Woo Shin <shin.junwoo97@gmail.com>
Date: Sun, 22 Oct 2017 00:42:46 -0400
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  3 ++-
 proc.c    | 61 ++++++++++++++++++++++++++++++++++++++++++++++---------------
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 13 +++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 67 insertions(+), 16 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..2d43d84 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -212,7 +213,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 ifndef CPUS
 CPUS := 2
 endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA) -display none
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
diff --git a/proc.c b/proc.c
index b122e3b..425cb49 100644
--- a/proc.c
+++ b/proc.c
@@ -73,6 +73,9 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  // set initial ticket count to 10 setting up the proc
+  p -> tickets = 10;
+
   return p;
 }
 
@@ -278,25 +281,53 @@ scheduler(void)
     if (!foundproc) hlt();
     foundproc = 0;
 
+    // count up the total numver of tickets
+    int totalTickets = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        totalTickets += p -> tickets;
+    }
+    // 0 to totalTickets - 1
+    int luckyTicket = random_at_most(totalTickets - 1);
+    // keep track of current ticket while looping processes
+    int current = 0;
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      if (p->state != RUNNABLE) {
         continue;
+      } else if (p -> state == RUNNABLE) {
+        // add current ticket count
+        current += p -> tickets;
+      }
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      foundproc = 1;
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
+      /*
+       * Switch to chosen process.  It is the process's job
+       * to release ptable.lock and then reacquire it
+       * before jumping back to us.
+       *
+       * It will only switch when the current ticket number is
+       * greater than luckyTicket. This is to account for the
+       * random number being 1 to totalTickets - 1
+       */
+      if (current > luckyTicket) {
+          // winner!
+          foundproc = 1;
+          proc = p;
+          switchuvm(p);
+          p->state = RUNNING;
+          swtch(&cpu->scheduler, proc->context);
+          switchkvm();
+
+          /*
+           * Process is done running for now.
+           * It should have changed its p->state before coming back.
+           *
+           * set p to initial process in table
+           */
+          proc = 0;
+          p = ptable.proc;
+      }
     }
     release(&ptable.lock);
 
@@ -463,7 +494,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s %d", p->pid, state, p->name, p -> tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..20b62ce 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // track number of tickets it's assigned
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..ea3c92f 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,16 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int sys_settickets(void) {
+  int n;
+  // get the number of tickets
+  if (argint(0, &n) < 0) {
+    return -1;
+  }
+
+  // proc.h defines currently running CPU on current CPU
+  proc -> tickets = n;
+
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
2.7.4

